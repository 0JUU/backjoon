##################################################################################################
# 문제명: 스택
##################################################################################################
# 시간 제한 | 메모리 제한
# 0.5초      |  256MB
##################################################################################################
# 문제: 정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
#      명령은 총 다섯 가지이다.
#
#      push X: 정수 X를 스택에 넣는 연산이다.
#      pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
#      size: 스택에 들어있는 정수의 개수를 출력한다.
#      empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
#      top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
##################################################################################################
# 입력: 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 
#      둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 
#      주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 
#      문제에 나와있지 않은 명령이 주어지는 경우는 없다.
# 출력: 출력해야 하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
##################################################################################################
# 예제 입력1: 
# 14
# push 1
# push 2
# top
# size
# empty
# pop
# pop
# pop
# size
# empty
# pop
# push 3
# empty
# top
# 예제 출력1: 
# 2
# 2
# 0
# 2
# 1
# -1
# 0
# 1
# -1
# 0
# 3
#-------------------
# 예제 입력2: 
# 7
# pop
# top
# push 123
# top
# pop
# top
# pop
# 예제 출력2: 
# -1
# -1
# 123
# 123
# -1
# -1
##################################################################################################
# 알고리즘 분류: 구현, 자료구조, 스택
##################################################################################################
# 구현코드:
# N=int(input())
# l=[]
#
# for _ in range(N):
#     M=input().split()
#     c=M[0]
#     if c=="push":
#         l.append(M[1])
#     elif c=="pop":
#         if not l:
#             print(-1)
#         else:
#             print(l.pop())
#     elif c=="size":
#         print(len(l))
#     elif c=="empty":
#         if not l:
#             print(1)
#         else:
#             print(0)
#     elif c=="top":
#         if not l:
#             print(-1)
#         else:
#             print(l[-1])
# ==> 결과: 시간 초과
##################################################################################################
# 수정 후 제출환 코드:
import sys
i=sys.stdin.readline  # 빠른 입력을 위해 사용

def main():
    N=int(i().strip())  # 첫째 줄에서 명령어 개수 읽기
    s=[]  # 스택을 저장할 리스트 초기화
    R=[]  # 결과를 저장할 리스트 초기화

    for _ in range(N):
        C=i().strip().split()  # 명령어와 인자 읽기

        if C[0]=="push":
            s.append(C[1])  # push의 경우, 값을 출력하지 않으므로 스택에만 추가
        elif C[0]=="pop":
            if s:  # 스택이 비어있지 않으면 스택의 가장 위의 값을 꺼내서 결과에 추가
                R.append(s.pop())
            else:  # 스택이 비어있으면 -1 결과에 추가
                R.append("-1")
        elif C[0]=="size":
            R.append(str(len(s)))  # 스택의 크기를 str로 변환한 후 결과에 추가
        elif C[0]=="empty":
            if s:  # 스택이 비어있지 않으면 결과에 0 추가
                R.append("0")
            else:  # 스택이 비어있으면 결과에 1 추가
                R.append("1")
        elif C[0]=="top":
            if s:  # 스택이 비어있지 않으면 스택의 가장 위의 값을 결과에 추가
                R.append(s[-1])
            else:  # 스택이 비어있으면 결과에 -1 추가
                R.append("-1")
    print("\n".join(R))  # 결과에 담긴 값들을 한 줄씩 출력

if __name__=="__main__":
    main()
##################################################################################################